const dynatrace = {}
try {
  dynatrace.sdk = require('@dynatrace/oneagent-sdk')
  dynatrace.api = dynatrace.sdk.createInstance()
} catch (err) {
  // If module was not required, do not do anything
}

const isDynatraceEnabled = () => {
  return dynatrace.sdk !== undefined
}

const _dynatraceResultCallback = function (tracer, cb) {
  return function (err, results, fields) {
    if (err) {
      // set the error on the tracer
      tracer.error(err)
    } else {
      // optionally set result data
      tracer.setResultData({
        rowsReturned: (results && results.length) || results
      })
    }
    // end the tracer and call client callback forwarding results
    tracer.end(cb, err, results, fields)
  }
}

const _decorateExec = (client, dbInfo) => {
  // args = [sql, options, callback] --> options is optional
  return function (...args) {
    const cb = args[args.length - 1]

    const tracer = dynatrace.api.traceSQLDatabaseRequest(dbInfo, {
      statement: args[0]
    })

    tracer.startWithContext(client.exec, client, args.slice(0, args.length - 1), _dynatraceResultCallback(tracer, cb))
  }
}

const _decoratePreparedStatement = function (client, dbInfo) {
  // args = [sql, options, callback] --> options is optional
  return function (...args) {
    const cb = args[args.length - 1]

    const tracer = dynatrace.api.traceSQLDatabaseRequest(dbInfo, {
      statement: args[0]
    })

    tracer.startWithContext(client.prepare, client, args.slice(0, args.length - 1), (err, stmt) => {
      if (err) {
        tracer.error(err)
        tracer.end(cb, err)
      } else {
        const decoratedStmt = {}
        Object.setPrototypeOf(decoratedStmt, stmt)
        // args = [values, options, callback] --> options is optional
        decoratedStmt.exec = function (...args) {
          const stmtCb = args[args.length - 1]
          stmt.exec(...args.slice(0, args.length - 1), _dynatraceResultCallback(tracer, stmtCb))
        }
        cb(null, decoratedStmt)
      }
    })
  }
}

const decorateClient = (client, tenant) => {
  const decoratedClient = {}
  Object.setPrototypeOf(decoratedClient, client)

  // Static info describing the database. TODO: Include host in name?
  const dbInfo = {
    name: `SAPHANA${tenant === 'anonymous' ? '' : `-${tenant}`}`,
    vendor: dynatrace.sdk.DatabaseVendor.HANADB,
    host: client._settings.host,
    port: Number(client._settings.port)
  }

  decoratedClient.exec = _decorateExec(client, dbInfo)
  decoratedClient.prepare = _decoratePreparedStatement(client, dbInfo)

  return decoratedClient
}

module.exports = { decorateClient, isDynatraceEnabled }
